// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/kinneko-de/api-contract/golang/kinnekode/restaurant/document/v1"
)

// DocumentServiceClient is an autogenerated mock type for the DocumentServiceClient type
type DocumentServiceClient struct {
	mock.Mock
}

// GeneratePreview provides a mock function with given fields: ctx, in, opts
func (_m *DocumentServiceClient) GeneratePreview(ctx context.Context, in *v1.GeneratePreviewRequest, opts ...grpc.CallOption) (v1.DocumentService_GeneratePreviewClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1.DocumentService_GeneratePreviewClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GeneratePreviewRequest, ...grpc.CallOption) (v1.DocumentService_GeneratePreviewClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GeneratePreviewRequest, ...grpc.CallOption) v1.DocumentService_GeneratePreviewClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.DocumentService_GeneratePreviewClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GeneratePreviewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDocumentServiceClient creates a new instance of DocumentServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocumentServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DocumentServiceClient {
	mock := &DocumentServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
